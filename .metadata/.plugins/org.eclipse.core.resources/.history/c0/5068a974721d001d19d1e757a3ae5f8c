package com.nprater.server.services;

import java.util.Optional;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.validation.BindingResult;

import com.nprater.server.models.City;
import com.nprater.server.models.User;
import com.nprater.server.repositories.CityRepository;
import com.nprater.server.repositories.RoleRepository;
import com.nprater.server.repositories.UserRepository;

@Service
public class UserService {
	private UserRepository userRepo;
	private CityRepository cityRepo;
	private RoleRepository roleRepo;
	private BCryptPasswordEncoder bCrypt;
	
	public UserService(UserRepository u, CityRepository c, RoleRepository r, BCryptPasswordEncoder b) {
		this.userRepo = u;
		this.cityRepo = c;
		this.roleRepo = r;
		this.bCrypt = b;
	}
	
	public void saveWithUserRole(User user) {
		user.setPassword(bCrypt.encode(user.getPassword()));
		user.setRoles(roleRepo.findByName("ROLE_USER");
	}
	
	//Registration
	public User register(User newUser, Long city_id, BindingResult result) {
		//check if email is already in use
		if(userRepo.findByEmail(newUser.getEmail()).isPresent()) {
			result.rejectValue("email","Unique","Email is already in use");
		}
		
		//check to see if the password and confirmation password match
		if(!newUser.getPassword().equals(newUser.getConfirmPassword())) {
			result.rejectValue("confirm", "Matches","Passwords do not match");
		}
		
		//check if there are any errors. If so, return null. Otherwise, hash the password and store the user.
		if(result.hasErrors()) {
			return null;
		} else {
			String hashed = BCrypt.hashpw(newUser.getPassword(), BCrypt.gensalt());
			newUser.setPassword(hashed);
			
			Optional<City> optionalCity = cityRepo.findById(city_id);
			if(optionalCity.isPresent()) {
				City city = optionalCity.get();
				newUser.setCity(city);
				return userRepo.save(newUser);
			} else {
				return null;
			}
		}
	}
}
